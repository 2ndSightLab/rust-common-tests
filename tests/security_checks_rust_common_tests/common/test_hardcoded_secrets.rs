////////////////////////////////////////////////////////////////
//
//  Name: Hardcoded secrets detection test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/security_checks_rust_common_tests/common/test_hardcoded_secrets.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Scans code for potential hardcoded secrets and sensitive information
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod test_hardcoded_secrets_tests {
    use regex::Regex;
    use std::fs;
    use walkdir::WalkDir;

    #[test]
    fn test_no_hardcoded_secrets() {
        let CURRENT_DIR = std::env::current_dir().expect("Failed to get current directory");

        // Skip if we're in the common tests directory itself
        if CURRENT_DIR.file_name().unwrap_or_default() == "rust-common-tests" {
            return;
        }

        let SECRET_PATTERNS = [
            r#"password\s*=\s*""#,
            r#"secret\s*=\s*""#,
            r#"api_key\s*=\s*""#,
            r#"token\s*=\s*""#,
            r#"key\s*=\s*"[^<]"#,
        ];

        for ENTRY in WalkDir::new(&CURRENT_DIR)
            .into_iter()
            .filter_map(std::result::Result::ok)
            .filter(|E| E.path().extension().is_some_and(|EXT| EXT == "rs"))
        {
            let Ok(CONTENT) = fs::read_to_string(ENTRY.path()) else {
                continue;
            };

            for PATTERN in &SECRET_PATTERNS {
                let REGEX = Regex::new(PATTERN).unwrap();
                assert!(
                    !REGEX.is_match(&CONTENT),
                    "Potential hardcoded secret found in {:?}",
                    ENTRY.path()
                );
            }
        }
    }
}
