////////////////////////////////////////////////////////////////
//
//  Name: Code separation security test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/security_checks_rust_common_tests/common/test_code_separation.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Validates that no test code exists in production src/ directories
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod tests {
    use std::fs;
    use std::path::Path;

    #[test]
    fn test_no_test_code_in_src() {
        fn check_file_for_test_code(PATH: &Path) -> Vec<String> {
            let mut VIOLATIONS = Vec::new();
            if let Ok(CONTENT) = fs::read_to_string(PATH) {
                if CONTENT.contains("#[cfg(test)]") {
                    VIOLATIONS.push(format!("{}: Contains #[cfg(test)]", PATH.display()));
                }
                if CONTENT.contains("#[test]") {
                    VIOLATIONS.push(format!("{}: Contains #[test]", PATH.display()));
                }
            }
            VIOLATIONS
        }

        fn walk_src_dir(DIR: &Path) -> Vec<String> {
            let mut VIOLATIONS = Vec::new();
            if let Ok(ENTRIES) = fs::read_dir(DIR) {
                for ENTRY in ENTRIES.flatten() {
                    let PATH = ENTRY.path();
                    if PATH.is_dir() {
                        VIOLATIONS.extend(walk_src_dir(&PATH));
                    } else if PATH.extension().is_some_and(|ext| ext == "rs") {
                        VIOLATIONS.extend(check_file_for_test_code(&PATH));
                    }
                }
            }
            VIOLATIONS
        }

        let SRC_DIR = Path::new("src");
        assert!(SRC_DIR.exists(), "src directory not found");

        let VIOLATIONS = walk_src_dir(SRC_DIR);
        assert!(
            VIOLATIONS.is_empty(),
            "Test code found in src: {VIOLATIONS:?}"
        );
    }
}
