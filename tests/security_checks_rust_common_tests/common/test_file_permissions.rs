////////////////////////////////////////////////////////////////
//
//  Name: File permissions security test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/security_checks_rust_common_tests/common/test_file_permissions.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Validates that files have secure permission settings
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod test_file_permissions_tests {
    use std::fs;
    use walkdir::WalkDir;

    #[test]
    fn test_no_unsafe_file_permissions() {
        let CURRENT_DIR = std::env::current_dir().expect("Failed to get current directory");

        // Skip if we're in the common tests directory itself
        if CURRENT_DIR.file_name().unwrap_or_default() == "rust-common-tests" {
            return;
        }

        for ENTRY in WalkDir::new(&CURRENT_DIR)
            .into_iter()
            .filter_map(std::result::Result::ok)
            .filter(|E| E.path().extension().is_some_and(|EXT| EXT == "rs"))
        {
            let Ok(CONTENT) = fs::read_to_string(ENTRY.path()) else {
                continue;
            };

            // Check for world-writable permissions
            let UNSAFE_PATTERNS = ["0o777", "0o666", "0o766", "0o676", "0o667"];

            for PATTERN in &UNSAFE_PATTERNS {
                assert!(
                    !CONTENT.contains(PATTERN),
                    "Unsafe file permission {PATTERN} found in {:?}",
                    ENTRY.path()
                );
            }
        }
    }
}
