////////////////////////////////////////////////////////////////
//
//  Name: Best practices compliance unit test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/unit_test_rust_common_tests/common/test_best_practices_compliance.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Runs comprehensive linting and formatting checks
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod tests {
    use std::process::Command;

    #[test]
    fn test_best_practices_compliance() {
        // Rule rust.tests.24: Fail if run as root
        assert_ne!(
            unsafe { libc::getuid() },
            0,
            "Tests must not be run as root user"
        );

        let OUTPUT = Command::new("./scripts/best-practices.sh")
            .output()
            .expect("Failed to execute best-practices.sh");

        let STDERR = String::from_utf8_lossy(&OUTPUT.stderr);

        assert!(
            OUTPUT.status.success(),
            "best-practices.sh failed with exit code: {}. Output: {}",
            OUTPUT.status.code().unwrap_or(-1),
            STDERR
        );

        // Only fail on actual clippy warnings (lines that start with "warning:" and contain file paths)
        let CLIPPY_WARNINGS: Vec<&str> = STDERR
            .lines()
            .filter(|line| line.trim().starts_with("warning:") && line.contains(" --> "))
            .collect();

        assert!(
            CLIPPY_WARNINGS.is_empty(),
            "Best practices check found clippy warnings:\n{}",
            CLIPPY_WARNINGS.join("\n")
        );
    }
}
