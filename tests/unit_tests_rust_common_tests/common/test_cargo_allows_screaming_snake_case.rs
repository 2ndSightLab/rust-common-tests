////////////////////////////////////////////////////////////////
//
//  Name: Cargo SCREAMING_SNAKE_CASE validation test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/unit_test_rust_common_tests/common/test_cargo_allows_screaming_snake_case.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Validates Cargo.toml allows SCREAMING_SNAKE_CASE variables
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod tests {
    use std::fs;

    #[test]
    fn test_cargo_allows_screaming_snake_case() {
        let CURRENT_DIR = std::env::current_dir().expect("Failed to get current directory");

        // Skip if we're in the common tests directory itself
        if CURRENT_DIR.file_name().unwrap_or_default() == "rust-common-tests" {
            return;
        }

        let CARGO_PATH = CURRENT_DIR.join("Cargo.toml");
        if CARGO_PATH.exists() {
            let CONTENT = fs::read_to_string(&CARGO_PATH).unwrap();

            // Check for the required lint override
            assert!(
                CONTENT.contains("[lints.rust]") && CONTENT.contains("non_snake_case = \"allow\""),
                "Cargo.toml must contain [lints.rust] section with non_snake_case = \"allow\""
            );
        }
    }
}
