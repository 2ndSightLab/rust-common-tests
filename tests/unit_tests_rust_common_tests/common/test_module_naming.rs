////////////////////////////////////////////////////////////////
//
//  Name: Module naming convention unit test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/unit_test_rust_common_tests/common/test_module_naming.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Ensures consistent naming conventions across the project
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
pub mod module_naming_validation_tests {
    use std::fs;
    use std::path::Path;

    /// # Panics
    /// Panics if generic 'mod tests' declarations are found in unit test files
    #[test]
    pub fn test_no_generic_mod_tests_in_unit() {
        let UNIT_TESTS_DIR = Path::new("tests/unit/common");

        if !UNIT_TESTS_DIR.exists() {
            return;
        }

        let mut VIOLATIONS = Vec::new();

        if let Ok(entries) = fs::read_dir(UNIT_TESTS_DIR) {
            for entry in entries.flatten() {
                let PATH = entry.path();
                if PATH.extension().is_some_and(|ext| ext == "rs")
                    && PATH.file_name().is_some_and(|name| name != "mod.rs")
                    && let Ok(content) = fs::read_to_string(&PATH)
                {
                    let PATTERN = format!("mod {} {{", "tests");
                    if content.contains(&PATTERN) {
                        VIOLATIONS.push(format!(
                            "{}: Uses generic 'mod tests' instead of unique module name",
                            PATH.display()
                        ));
                    }
                }
            }
        }

        assert!(
            VIOLATIONS.is_empty(),
            "Found generic 'mod tests' declarations in unit:\n{}",
            VIOLATIONS.join("\n")
        );
    }
}
