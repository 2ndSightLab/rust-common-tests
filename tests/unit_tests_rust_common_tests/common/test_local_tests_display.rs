////////////////////////////////////////////////////////////////
//
//  Name: Local tests display unit test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/unit_test_rust_common_tests/common/test_local_tests_display.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Validates local test display and output formatting
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[allow(clippy::all)]
#[allow(clippy::pedantic)]
#[allow(clippy::nursery)]
#[cfg(test)]
mod local_tests_display_tests {
    use std::fs;

    #[test]
    fn test_local_tests_display_validation() {
        let SCRIPT_CONTENT =
            fs::read_to_string("./scripts/test.sh").expect("test.sh file not found");

        // Check that script displays "Done testing" for each category
        assert!(
            SCRIPT_CONTENT.contains("echo \"Done testing: $CATEGORY_NAME\""),
            "test.sh missing done testing display"
        );

        // Check that script counts common vs local tests
        assert!(
            SCRIPT_CONTENT.contains("TOTAL_COMMON=$((TOTAL_COMMON + 1))"),
            "test.sh not counting common tests"
        );

        // Check that script counts local tests
        assert!(
            SCRIPT_CONTENT.contains("TOTAL_LOCAL=$((TOTAL_LOCAL + 1))"),
            "test.sh not counting local tests"
        );

        // Check that script displays total counts
        assert!(
            SCRIPT_CONTENT.contains("echo \"Total Common: $TOTAL_COMMON\""),
            "test.sh not displaying total common count"
        );

        // Check that script displays total local count
        assert!(
            SCRIPT_CONTENT.contains("echo \"Total Local: $TOTAL_LOCAL\""),
            "test.sh not displaying total local count"
        );
    }
}
