////////////////////////////////////////////////////////////////
//
//  Name: Service configuration validation test
//  GitHub repository: https://github.com/2ndSightLab/rust-common-tests.git
//  File: tests/unit_test_rust_common_tests/common/test_service_config_validation.rs
//  Copyright: Â© 2025 2nd Sight Lab, LLC
//
//  Validates service.toml configuration with SERVICE_NAME and LOG_PATH
//
//  This software, which includes components generated with the assistance of artificial
//  intelligence, is free for personal, educational, and non-profit use, provided that
//  the included copyright notice is retained in all copies or substantial portions of
//  the software. This license, however, does not grant permission for any commercial
//  use, which requires obtaining a separate commercial license from the author. The
//  software is provided "as is," without any warranty, and the author cannot be held
//  liable for any damages or claims arising from its use. By using this software,
//  all users acknowledge that any potentially uncopyrightable portions generated by
//  AI are governed by the terms of this license as part of the overall work.
//
////////////////////////////////////////////////////////////////

#[cfg(test)]
mod tests {
    use std::fs;
    use std::path::Path;

    #[test]
    fn test_service_config_validation() {
        let SERVICE_TOML_PATH = Path::new("../service.toml");

        if !SERVICE_TOML_PATH.exists() {
            println!("N/A: No service is configured in this repository (service.toml not found)");
            return;
        }

        let CONTENT = fs::read_to_string(SERVICE_TOML_PATH).expect("Failed to read service.toml");

        let TOML_VALUE: toml::Value =
            toml::from_str(&CONTENT).expect("Failed to parse service.toml");

        let SERVICE_NAME = TOML_VALUE
            .get("SERVICE_NAME")
            .expect("SERVICE_NAME not found in service.toml");

        assert!(
            !SERVICE_NAME.as_str().unwrap_or("").is_empty(),
            "SERVICE_NAME must be set to a non-empty value"
        );

        let LOG_PATH = TOML_VALUE
            .get("LOG_PATH")
            .expect("LOG_PATH not found in service.toml");

        assert!(
            !LOG_PATH.as_str().unwrap_or("").is_empty(),
            "LOG_PATH must be set to a non-empty value"
        );
    }
}
